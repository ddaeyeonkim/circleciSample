plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'jacoco'
}

android {
    namespace 'com.example.circlecisample'
    compileSdk 33

    defaultConfig {
        applicationId "com.example.circlecisample"
        minSdk 26
        targetSdk 33
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    testOptions {
        unitTests.all {
            jacoco {
                // Test 타입의 파일을 모두 확인하기 위하여 설정.
                includeNoLocationClasses = true
                // java.lang.NoClassDefFoundError: jdk/internal/reflect/GeneratedSerializationConstructorAccessor1
                // 해당 오류가 발생할 경우 추가.
                excludes = ['jdk.internal.*']
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {
            testCoverageEnabled true
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
}

dependencies {

    implementation 'androidx.core:core-ktx:1.7.0'
    implementation 'androidx.appcompat:appcompat:1.6.0'
    implementation 'com.google.android.material:material:1.8.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.3'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
}

// dependsOn : 유닛 테스트를 수행하는 태스크 이름으로 설정.
task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest']) {
    group = "verification"
    description = "Generate Jacoco coverage reports"

    // reports 생성 확장자
    reports {
        xml.enabled = true
        html.enabled = true
    }

    def mainSrc = "${project.projectDir}/src/main/java"
    sourceDirectories.setFrom(files([mainSrc])) // 커버리지를 측정할 소스 디렉터리

    // 커버리지에서 제외할 파일
    def fileFilter = [
            '**/R.class',
            '**/R$*.class',
            '**/BuildConfig.*',
            '**/Manifest*.*',
            '**/*Test*.*',
            'android/**/*.*'
    ]
    def debugTree = fileTree(
            dir: "${buildDir}/intermediates/classes/debug",
            excludes: fileFilter
    )
    classDirectories.setFrom(files([debugTree])) // 컴파일 결과 파일이 있는 디렉터리 지정.

    // 커버리지 측정 결과를 저장할 파일
    executionData.setFrom(fileTree(dir: "${buildDir}/jacoco/testDebugUnitTest.exec"))
}